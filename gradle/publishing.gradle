/*
 * Copyright 2013-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'

ext {
    pluginIdPrefix = 'org.asciidoctor'

    pluginExtraText = (version.contains('-alpha') || version.contains('-beta')) ?
        " (If you need a production-ready version of the AsciidoctorJ plugin for Gradle use a 2.x release of 'org.asciidoctor.convert' instead)"
        : ''


    configurePlugin = {  String providedId, String providedDisplayName, String providedDescription, List<String> providedTags ->
        final String providedName = providedId.replaceAll(~/\./,'')
        final File props = file("src/main/resources/META-INF/gradle-plugins/${providedId}.properties")
        if(!props.exists()) {
            throw new GradleException( "${props} does not exist")
        }
        String className
        for( String line : props.readLines() ) {
            def match = line =~ /^implementation-class\s*=\s*(.+?)$/

            if(match.matches()) {
                className = match[0][1]
                break
            }
        }

        if(className == null) {
            throw new GradleException("${props} does not contain implemention-class")
        }

        gradlePlugin {
            plugins {
                "${providedName}Plugin" {
                    id = providedId
                    implementationClass = className
                }
            }
        }

        pluginBundle {
            plugins {
                "${providedName}Plugin" {
                    id = providedId
                    displayName = providedDisplayName
                    description = "${providedDescription}${pluginExtraText}"
                    tags = (['asciidoctor'] + providedTags)
                }
            }
        }
    }
}

pluginBundle {
    website = config.info.links.website
    vcsUrl = config.info.links.scm
    description = config.info.description
    tags = config.info.tags

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
        version = project.version
    }
}


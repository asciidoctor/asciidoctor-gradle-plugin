/*
 * Copyright 2012-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    apply from: 'gradle/Bintray.gradle'

    repositories {
        mavenRepo name: 'Bintray Javadoc Hotfix repo', url: 'http://dl.bintray.com/melix/gradle-javadoc-hotfix-plugin'
        mavenRepo name: 'Bintray JCenter', url: 'http://jcenter.bintray.com'
    }

    dependencies {
        classpath 'me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'javadocHotfix'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'build-dashboard'
apply plugin: 'maven-publish'
apply from: 'gradle/integration-test.gradle'

configurations {
    deployerJars
}

repositories {
    mavenCentral()
    bintray.jcenter()
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2',
            'org.apache.maven:maven-ant-tasks:2.1.0'
    compile gradleApi()
    compile('org.asciidoctor:asciidoctor-java-integration:0.1.4') {
        exclude group: 'rubygems', module :'haml'
        exclude group: 'rubygems', module :'asciidoctor'
        exclude group: 'rubygems', module :'coderay'
        exclude group: 'rubygems', module :'tilt'
        exclude group: 'rubygems', module :'erubis'
        exclude group: 'rubygems', module :'slim'
    }
    compile 'org.apache.avalon.framework:avalon-framework-api:4.3.1'
    compile 'org.apache.avalon.framework:avalon-framework-impl:4.3.1'
    compile 'org.apache.xmlgraphics:fop:1.1'
    runtime 'net.sf.xslthl:xslthl:2.1.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
    testCompile 'cglib:cglib-nodep:2.2.2'

}

codenarc {
    configFile = file('config/codenarc/codenarc.groovy')
    // run codenarc on production sources only
    sourceSets = [project.sourceSets.main]
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().with {
                    appendNode('description',
                        'A Gradle plugin that uses Asciidoctor via JRuby to process AsciiDoc source files within the project')
                    appendNode('url', 'http://asciidoctor.org')
                    appendNode('inceptionYear', '2013')
                    appendNode('licenses')
                        .appendNode('license')
                            .appendNode('name', 'The Apache Software License, Version 2.0').parent()
                            .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt').parent()
                            .appendNode('distribution', 'repo')
                    appendNode('scm')
                       .appendNode('url', 'https://github.com/asciidoctor/asciidoctor-gradle-plugin')
                    Node developers = appendNode('developers')
                    [
                         aalmiray: 'Andres Almiray',
                         noamt: 'Noam Tenne',
                         bmuschko: 'Benjamin Muschko'
                    ].each { devId, devName ->
                        developers.appendNode('developer')
                            .appendNode('id', devId).parent()
                            .appendNode('name', devName).parent()
                            .appendNode('roles')
                                .appendNode('role', 'Developer')
                    }
                    [
                        tombujok: 'Tom Bujok',
                        lpeilak: 'Lukasz Pielak',
                        dvyazelenko: 'Dmitri Vyazelenko'
                    ].each { devId, devName ->
                        developers.appendNode('developer')
                            .appendNode('id', devId).parent()
                            .appendNode('name', devName).parent()
                            .appendNode('roles')
                                .appendNode('role', 'Contributor')
                    }
                }
            }
        }
    }
}

/*
if(!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if(!project.hasProperty('bintrayPassword')) ext.bintrayPassword = ''
*/

/*
 * Copyright 2013-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'jacoco'
    id 'codenarc'
    id 'java-gradle-plugin'
    id 'com.jfrog.bintray'              version '1.7.3'
    id 'net.nemerosa.versioning'        version '2.6.0'
    id 'com.github.ben-manes.versions'  version '0.14.0'
    id 'com.gradle.plugin-publish'      version '0.9.7'
    id 'com.github.hierynomus.license'  version '0.14.0'
    id 'com.github.kt3k.coveralls'      version '2.8.1'
    id 'net.ossindex.audit'             version '0.1.1'
    id 'org.kordamp.jdeps'              version '0.1.0'
}

apply from: 'gradle/credentials.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-quality.gradle'

gradlePlugin {
    plugins {
        asciidoctorPlugin {
            id = project_pluginId
            implementationClass = 'org.asciidoctor.gradle.AsciidoctorPlugin'
        }
    }
}

repositories {
    jcenter()
    // maven { url 'http://dl.bintray.com/lordofthejars/maven'}
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

audit {
    failOnError = false
}

dependencies {
    compile gradleApi()
    testCompile "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
    testCompile("org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorjDslVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.asciidoctor', module: 'asciidoctorj'
    }
    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group:'org.codehaus.groovy'
    }
    testCompile "org.jsoup:jsoup:$jsoupVersion"
    testCompile "cglib:cglib-nodep:$cglibVersion"
    testCompile gradleTestKit()
}

compileGroovy {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

groovydoc {
    use             = true
    source          = project.sourceSets.main.allSource
    classpath       = javadoc.classpath
    ext.windowtitle = "$project.name $project.version API"
    ext.doctitle    = "$project.name $project.version API"
    header          = "$project.name $project.version API"
    footer          = "Copyright &copy; ${copyrightYear} the original author or authors. All rights reserved."
    includePrivate  = false
    link 'https://docs.gradle.org/3.5/javadoc/', 'org.gradle.'
    link 'http://docs.oracle.com/javase/7/docs/api/', 'java.', 'org.xml.', 'javax.', 'org.w3c.'
}

task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    group 'Build'
    description 'An archive of the javadoc'
    classifier 'javadoc'
    from groovydoc.destinationDir
}

jar.finalizedBy sourcesJar
jar.finalizedBy javadocJar

artifacts {
    sourcesJar
    javadocJar
}

task publishRelease(dependsOn: [bintrayUpload, publishPlugins]) {}

project.tasks.withType(Test) {
    systemProperty "asciidoctorjVersion", asciidoctorjVersion
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

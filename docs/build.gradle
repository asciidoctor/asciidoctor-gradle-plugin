import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'idea'
    id 'org.asciidoctor.jvm.convert' apply false
    id 'org.ajoberstar.git-publish' version '2.1.1' apply false
    id 'org.ajoberstar.grgit' version '3.1.1' apply false
}

repositories {
    jcenter()
}

ext {
    asciidoctorSourceSyncDir = file("${buildDir}/docs/sources")
    asciidoctorCombinedDocsDir = file("${buildDir}/docs/combined")

    docProjects = [
        'base', 'jvm', 'jvm-epub', 'jvm-gems', 'jvm-slides', 'kindlegen'
    ]
}

allprojects {
    apply from: "${rootDir}/gradle/load-properties.gradle"
    version = pluginsGradleProperties.version
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply from: "${rootDir}/gradle/utilities.gradle"
apply from: "${rootDir}/gradle/asciidoctor-config.gradle"

task prepareSources( type: Sync) {
    into asciidoctorSourceSyncDir

    docProjects.each { proj ->
        from pluginProjectDir(proj), {
            into pluginDirName(proj)
            include 'src/**'
            exclude '**/META-INF/**'
        }
    }
}

asciidoctor {
    dependsOn prepareSources
    sourceDir 'src/docs/asciidoc'
    baseDirFollowsSourceDir()

    sources {
        include 'index.adoc'
    }

    docProjects.each { proj ->
        attributes "plugin-${proj}" : file("${prepareSources.destinationDir}/${pluginDirName(proj)}/src")
    }
}

task combineDocs (type : Sync) {
    into asciidoctorCombinedDocsDir
    from asciidoctor, {
        into 'user-guide'
    }

    docProjects.each { proj ->
        from "${pluginProjectDir(proj)}/build/docs/groovydoc", {
            into "api-${pluginDirName(proj)}"
        }
    }
}


